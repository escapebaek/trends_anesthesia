import json
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import plotly.offline as pyo
from yattag import Doc
import webbrowser
import os
import subprocess
import sys
from collections import Counter
import re
from datetime import datetime
import signal
import threading

# GitHub ÏÑ§Ï†ï (ÏÇ¨Ïö©ÏûêÍ∞Ä ÏàòÏ†ïÌï¥Ïïº Ìï† Î∂ÄÎ∂Ñ)
GITHUB_REPO_PATH = "."  # ÌòÑÏû¨ ÎîîÎ†âÌÜ†Î¶¨Í∞Ä git Î†àÌè¨ÏßÄÌÜ†Î¶¨ÎùºÍ≥† Í∞ÄÏ†ï
GITHUB_REPO_URL = "https://github.com/escapebaek/trends_anesthesia.git"
AUTO_DEPLOY = True      # ÏûêÎèô Î∞∞Ìè¨ Ïó¨Î∂Ä
AUTO_OPEN_BROWSER = True  # ÏûêÎèôÏúºÎ°ú Î∏åÎùºÏö∞Ï†Ä Ïó¥Í∏∞ Ïó¨Î∂Ä

def safe_input(prompt, timeout=10, default='n'):
    """ÌÉÄÏûÑÏïÑÏõÉÏù¥ ÏûàÎäî ÏïàÏ†ÑÌïú ÏûÖÎ†• Ìï®Ïàò"""
    def timeout_handler():
        print(f"\n‚è∞ {timeout}Ï¥à ÌÉÄÏûÑÏïÑÏõÉ - Í∏∞Î≥∏Í∞í '{default}' ÏÇ¨Ïö©")
        return default
    
    try:
        print(prompt, end='', flush=True)
        timer = threading.Timer(timeout, timeout_handler)
        timer.start()
        
        try:
            result = input().strip().lower()
            timer.cancel()
            return result if result else default
        except (EOFError, KeyboardInterrupt):
            timer.cancel()
            print(f"\n‚ö†Ô∏è ÏûÖÎ†• Ï∑®ÏÜåÎê® - Í∏∞Î≥∏Í∞í '{default}' ÏÇ¨Ïö©")
            return default
        except Exception:
            timer.cancel()
            print(f"\n‚ùå ÏûÖÎ†• Ïò§Î•ò - Í∏∞Î≥∏Í∞í '{default}' ÏÇ¨Ïö©")
            return default
            
    except Exception:
        print(f"\nüîß ÏïàÏ†ÑÌïú ÏûÖÎ†• Î™®Îìú - Í∏∞Î≥∏Í∞í '{default}' ÏÇ¨Ïö©")
        return default

def setup_git_repo():
    """Git Î†àÌè¨ÏßÄÌÜ†Î¶¨ Ï¥àÍ∏∞ ÏÑ§Ï†ï"""
    if not os.path.exists(".git"):
        print("üìÅ Git Î†àÌè¨ÏßÄÌÜ†Î¶¨Î•º Ï¥àÍ∏∞ÌôîÌï©ÎãàÎã§...")
        try:
            subprocess.run(["git", "init"], check=True)
            
            with open(".gitignore", "w") as f:
                f.write("""
# Python
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
*.so
.coverage
.pytest_cache/

# ÌôòÍ≤ΩÎ≥ÄÏàò ÌååÏùº (Ï§ëÏöî: API ÌÇ§ Î≥¥Ìò∏)
.env
.env.local
.env.production
.env.staging

# Data files (optional - Î≥¥ÏïàÏÉÅ ÎØºÍ∞êÌïú Îç∞Ïù¥ÌÑ∞Îäî Ï†úÏô∏)
# *.json

# OS
.DS_Store
Thumbs.db
""")
            
            print("‚úÖ Git Î†àÌè¨ÏßÄÌÜ†Î¶¨Í∞Ä Ï¥àÍ∏∞ÌôîÎêòÏóàÏäµÎãàÎã§.")
            print("üîó GitHubÏóêÏÑú Î†àÌè¨ÏßÄÌÜ†Î¶¨Î•º ÏÉùÏÑ±ÌïòÍ≥† Îã§Ïùå Î™ÖÎ†πÏñ¥Î•º Ïã§ÌñâÌïòÏÑ∏Ïöî:")
            print("   git remote add origin https://github.com/escapebaek/trends_anesthesia.git")
            return False
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Git Ï¥àÍ∏∞Ìôî Ïã§Ìå®: {e}")
            return False
    return True

def deploy_to_github():
    """GitHub PagesÎ°ú ÏûêÎèô Î∞∞Ìè¨"""
    try:
        result = subprocess.run(["git", "status", "--porcelain"], 
                              capture_output=True, text=True, check=True)
        
        if result.stdout.strip():
            print("üì§ Î≥ÄÍ≤ΩÏÇ¨Ìï≠ÏùÑ GitHubÏóê ÏóÖÎ°úÎìúÌï©ÎãàÎã§...")
            
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            commit_message = f"Update anesthesia classification dashboard - {timestamp}"
            
            subprocess.run(["git", "add", "."], check=True, timeout=30)
            subprocess.run(["git", "commit", "-m", commit_message], check=True, timeout=30)
            subprocess.run(["git", "push"], check=True, timeout=60)
            
            print("‚úÖ GitHubÏóê ÏóÖÎ°úÎìú ÏôÑÎ£å!")
            
            try:
                result = subprocess.run(["git", "remote", "get-url", "origin"], 
                                      capture_output=True, text=True, check=True, timeout=10)
                remote_url = result.stdout.strip()
                
                if "github.com" in remote_url:
                    repo_path = remote_url.split("github.com/")[1].replace(".git", "")
                    username, repo_name = repo_path.split("/")
                    pages_url = f"https://{username}.github.io/{repo_name}/"
                    
                    print(f"üåê GitHub Pages URL: {pages_url}")
                    print("‚è≥ Î∞∞Ìè¨ÍπåÏßÄ 5-10Î∂Ñ Ï†ïÎèÑ ÏÜåÏöîÎê† Ïàò ÏûàÏäµÎãàÎã§.")
                    
                    if AUTO_OPEN_BROWSER:
                        print("üöÄ ÏûêÎèôÏúºÎ°ú GitHub PagesÎ•º Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú ÏóΩÎãàÎã§...")
                        try:
                            webbrowser.open(pages_url)
                            print("‚úÖ Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú Ïó¥ÏóàÏäµÎãàÎã§!")
                        except Exception as e:
                            print(f"‚ö†Ô∏è Î∏åÎùºÏö∞Ï†Ä Ïó¥Í∏∞ Ïã§Ìå®: {e}")
                    else:
                        open_browser = safe_input(
                            "GitHub PagesÎ•º Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú Ïó¥ÍπåÏöî? (y/n, 10Ï¥à ÌõÑ ÏûêÎèôÏúºÎ°ú 'n'): ", 
                            timeout=10, 
                            default='n'
                        )
                        
                        if open_browser == 'y':
                            try:
                                webbrowser.open(pages_url)
                                print("‚úÖ Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú Ïó¥ÏóàÏäµÎãàÎã§!")
                            except Exception as e:
                                print(f"‚ö†Ô∏è Î∏åÎùºÏö∞Ï†Ä Ïó¥Í∏∞ Ïã§Ìå®: {e}")
                        else:
                            print("üìù ÏàòÎèôÏúºÎ°ú URLÏùÑ Î≥µÏÇ¨Ìï¥ÏÑú Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú ÌôïÏù∏ÌïòÏÑ∏Ïöî.")
                    
                    return pages_url
                        
            except Exception as e:
                print(f"‚ö†Ô∏è GitHub Pages URLÏùÑ ÏûêÎèôÏúºÎ°ú ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§: {e}")
                
        else:
            print("‚ÑπÔ∏è Î≥ÄÍ≤ΩÏÇ¨Ìï≠Ïù¥ ÏóÜÏäµÎãàÎã§.")
            
    except subprocess.TimeoutExpired:
        print("‚ùå Git Î™ÖÎ†πÏñ¥ Ïã§Ìñâ ÏãúÍ∞Ñ Ï¥àÍ≥º")
        return False
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Git Î™ÖÎ†πÏñ¥ Ïã§Ìñâ Ïã§Ìå®: {e}")
        print("üîß Ìï¥Í≤∞Î∞©Î≤ï:")
        print("   1. GitÏù¥ ÏÑ§ÏπòÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏")
        print("   2. GitHub Î†àÌè¨ÏßÄÌÜ†Î¶¨Í∞Ä Ïó∞Í≤∞ÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏")
        print("   3. Ïù∏Ï¶ù Ï†ïÎ≥¥Í∞Ä Ïò¨Î∞îÎ•∏ÏßÄ ÌôïÏù∏")
        return False
    except Exception as e:
        print(f"‚ùå Î∞∞Ìè¨ Ï§ë Ïò§Î•ò Î∞úÏÉù: {e}")
        return False
    
    return True

# 1. JSON Î°úÎìú
json_path = "anesthesia_classified_abstracts.json"
if not os.path.exists(json_path):
    print(f"‚ùå {json_path} ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.")
    print("üí° Î®ºÏ†Ä analyze_with_gemini.pyÎ•º Ïã§ÌñâÌïòÏÑ∏Ïöî.")
    sys.exit(1)

print("üìä Î∂ÑÎ•òÎêú Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ï§ë...")
with open(json_path, "r", encoding="utf-8") as f:
    classified_data = json.load(f)

# Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ Î°úÎìú (ÏûàÎã§Î©¥)
metadata = {}
meta_path = "anesthesia_classified_with_metadata.json"
if os.path.exists(meta_path):
    with open(meta_path, "r", encoding="utf-8") as f:
        full_data = json.load(f)
        metadata = full_data.get("metadata", {})

# 2. Îç∞Ïù¥ÌÑ∞ Ï†ÑÏ≤òÎ¶¨
category_stats = []
subtopic_stats = []
all_papers = []

for category, subtopics in classified_data.items():
    category_count = 0
    category_subtopics = 0
    
    for subtopic, papers in subtopics.items():
        if papers:  # Îπà Î¶¨Ïä§Ìä∏Í∞Ä ÏïÑÎãå Í≤ΩÏö∞Îßå
            category_count += len(papers)
            category_subtopics += 1
            
            # ÏÑ∏Î∂ÄÏ£ºÏ†ú ÌÜµÍ≥Ñ
            subtopic_stats.append({
                "category": category,
                "subtopic": subtopic,
                "count": len(papers),
                "category_short": category.split("(")[0].strip()
            })
            
            # Í∞úÎ≥Ñ ÎÖºÎ¨∏ Îç∞Ïù¥ÌÑ∞
            for paper in papers:
                paper_data = paper.copy()
                paper_data["category"] = category
                paper_data["subtopic"] = subtopic
                paper_data["category_short"] = category.split("(")[0].strip()
                all_papers.append(paper_data)
    
    if category_count > 0:  # ÎÖºÎ¨∏Ïù¥ ÏûàÎäî Ïπ¥ÌÖåÍ≥†Î¶¨Îßå
        category_stats.append({
            "category": category,
            "category_short": category.split("(")[0].strip(),
            "total_papers": category_count,
            "subtopics": category_subtopics
        })

# DataFrame ÏÉùÏÑ±
df_categories = pd.DataFrame(category_stats)
df_subtopics = pd.DataFrame(subtopic_stats)
df_papers = pd.DataFrame(all_papers)

print(f"‚úÖ Îç∞Ïù¥ÌÑ∞ Ï≤òÎ¶¨ ÏôÑÎ£å:")
print(f"   - ÌôúÏÑ± Ïπ¥ÌÖåÍ≥†Î¶¨: {len(df_categories)}Í∞ú")
print(f"   - Ï¥ù ÏÑ∏Î∂ÄÏ£ºÏ†ú: {len(df_subtopics)}Í∞ú")
print(f"   - Ï¥ù ÎÖºÎ¨∏: {len(df_papers)}Í∞ú")

# 3. ÏÉâÏÉÅ ÌåîÎ†àÌä∏ Ï†ïÏùò
colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A', '#98D8C8', '#F7DC6F', 
          '#BB8FCE', '#85C1E9', '#F8C471', '#82E0AA', '#F1948A', '#AED6F1']

category_colors = {}
if len(df_categories) > 0:
    for i, category in enumerate(df_categories['category'].unique()):
        category_colors[category] = colors[i % len(colors)]

print("üìà Ï∞®Ìä∏ ÏÉùÏÑ± Ï§ë...")

# 4. HTML Î¨∏ÏÑú ÏÉùÏÑ±
doc, tag, text = Doc().tagtext()

def create_modern_css():
    return """
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 20px;
        }
        
        .header {
            text-align: center;
            color: white;
            margin-bottom: 40px;
            padding: 40px 0;
        }
        
        .header h1 {
            font-size: 3em;
            font-weight: 700;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }
        
        .header p {
            font-size: 1.2em;
            opacity: 0.9;
        }
        
        .dashboard-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 30px;
            margin-bottom: 40px;
        }
        
        .chart-container {
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.2);
        }
        
        .full-width {
            grid-column: 1 / -1;
        }
        
        .chart-title {
            font-size: 1.5em;
            font-weight: 600;
            margin-bottom: 20px;
            color: #2c3e50;
            text-align: center;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 30px 0;
        }
        
        .stat-card {
            background: rgba(255,255,255,0.95);
            border-radius: 15px;
            padding: 25px;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            border: 1px solid rgba(255,255,255,0.3);
        }
        
        .stat-number {
            font-size: 2.5em;
            font-weight: 700;
            color: #667eea;
            margin-bottom: 10px;
        }
        
        .stat-label {
            color: #666;
            font-size: 1.1em;
            font-weight: 500;
        }
        
        .category-section {
            background: white;
            border-radius: 20px;
            margin: 30px 0;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
        }
        
        .category-header {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            padding: 20px 30px;
            border-radius: 15px;
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            justify-content: space-between;
            flex-wrap: wrap;
        }
        
        .category-title {
            font-size: 1.5em;
            font-weight: 600;
        }
        
        .category-stats {
            display: flex;
            gap: 15px;
            flex-wrap: wrap;
        }
        
        .category-stat {
            background: rgba(255,255,255,0.2);
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 0.9em;
        }
        
        .subtopics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
            gap: 25px;
        }
        
        .subtopic-card {
            background: #f8f9fa;
            border-radius: 15px;
            padding: 25px;
            border-left: 5px solid #667eea;
            transition: all 0.3s ease;
            cursor: pointer;
        }
        
        .subtopic-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0,0,0,0.1);
            background: #fff;
        }
        
        .subtopic-title {
            font-size: 1.3em;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .paper-count {
            background: #667eea;
            color: white;
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 0.8em;
            font-weight: 600;
        }
        
        .papers-list {
            max-height: 300px;
            overflow-y: auto;
            padding-right: 10px;
        }
        
        .paper-item {
            background: white;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 10px;
            border: 1px solid #e9ecef;
            transition: all 0.3s ease;
        }
        
        .paper-item:hover {
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            border-color: #667eea;
        }
        
        .paper-title {
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 8px;
            font-size: 1.05em;
            line-height: 1.3;
        }
        
        .paper-details {
            display: grid;
            grid-template-columns: auto 1fr auto;
            gap: 10px;
            align-items: center;
            margin-bottom: 10px;
            font-size: 0.9em;
            color: #666;
        }
        
        .paper-journal {
            font-weight: 500;
            color: #495057;
        }
        
        .paper-date {
            background: #e3f2fd;
            color: #1976d2;
            padding: 2px 8px;
            border-radius: 10px;
            font-size: 0.8em;
        }
        
        .paper-summary {
            color: #666;
            font-size: 0.95em;
            line-height: 1.4;
            margin-bottom: 10px;
        }
        
        .paper-link {
            display: inline-block;
            background: #28a745;
            color: white;
            text-decoration: none;
            padding: 6px 12px;
            border-radius: 15px;
            font-size: 0.85em;
            transition: all 0.3s ease;
        }
        
        .paper-link:hover {
            background: #218838;
            transform: scale(1.05);
        }
        
        .footer {
            text-align: center;
            color: white;
            margin-top: 50px;
            padding: 20px;
            opacity: 0.8;
        }
        
        @media (max-width: 768px) {
            .dashboard-grid {
                grid-template-columns: 1fr;
            }
            .header h1 {
                font-size: 2em;
            }
            .subtopics-grid {
                grid-template-columns: 1fr;
            }
            .category-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 15px;
            }
        }
        
        /* Ïä§ÌÅ¨Î°§Î∞î Ïä§ÌÉÄÏùºÎßÅ */
        .papers-list::-webkit-scrollbar {
            width: 6px;
        }
        
        .papers-list::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 3px;
        }
        
        .papers-list::-webkit-scrollbar-thumb {
            background: #c1c1c1;
            border-radius: 3px;
        }
        
        .papers-list::-webkit-scrollbar-thumb:hover {
            background: #a8a8a8;
        }
    </style>
    """

# HTML Íµ¨Ï°∞ ÏÉùÏÑ±
doc.asis("<!DOCTYPE html>")
with tag("html", lang="en"):
    with tag("head"):
        doc.asis('<meta charset="UTF-8">')
        doc.asis('<meta name="viewport" content="width=device-width, initial-scale=1.0">')
        with tag("title"):
            text("Anesthesia Research Classification - Interactive Dashboard")
        doc.asis(create_modern_css())
        doc.asis('<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>')
    
    with tag("body"):
        with tag("div", klass="container"):
            # Ìó§Îçî
            with tag("div", klass="header"):
                with tag("h1"):
                    text("üè• ÎßàÏ∑®Ìïô Ïó∞Íµ¨ Î∂ÑÎ•ò ÎåÄÏãúÎ≥¥Îìú")
                with tag("p"):
                    text("Anesthesia Research Classification Dashboard")
                with tag("p", style="font-size: 0.9em; margin-top: 10px; opacity: 0.7;"):
                    if metadata.get("analysis_date"):
                        text(f"Last updated: {metadata['analysis_date']}")
                    else:
                        text(f"Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M')}")
            
            # ÌÜµÍ≥Ñ Ïπ¥Îìú
            with tag("div", klass="stats-grid"):
                with tag("div", klass="stat-card"):
                    with tag("div", klass="stat-number"):
                        text(str(len(df_categories)))
                    with tag("div", klass="stat-label"):
                        text("ÌôúÏÑ± Ïπ¥ÌÖåÍ≥†Î¶¨")
                
                with tag("div", klass="stat-card"):
                    with tag("div", klass="stat-number"):
                        text(str(len(df_subtopics)))
                    with tag("div", klass="stat-label"):
                        text("ÏÑ∏Î∂Ä Ï£ºÏ†ú")
                
                with tag("div", klass="stat-card"):
                    with tag("div", klass="stat-number"):
                        text(str(len(df_papers)))
                    with tag("div", klass="stat-label"):
                        text("Î∂ÑÎ•òÎêú ÎÖºÎ¨∏")
                
                with tag("div", klass="stat-card"):
                    with tag("div", klass="stat-number"):
                        text(str(metadata.get("total_papers_analyzed", len(df_papers))))
                    with tag("div", klass="stat-label"):
                        text("Î∂ÑÏÑùÎêú Ï¥ù ÎÖºÎ¨∏")

# Ï∞®Ìä∏ ÏÉùÏÑ± (Îç∞Ïù¥ÌÑ∞Í∞Ä ÏûàÎäî Í≤ΩÏö∞ÏóêÎßå)
if len(df_categories) > 0:
    # Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÎÖºÎ¨∏ Ïàò Î∞î Ï∞®Ìä∏
    fig1 = px.bar(
        df_categories.sort_values('total_papers', ascending=True),
        x="total_papers",
        y="category_short",
        color="category_short",
        orientation="h",
        title="üìä Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÎÖºÎ¨∏ Î∂ÑÌè¨",
        labels={"total_papers": "ÎÖºÎ¨∏ Ïàò", "category_short": "Ïπ¥ÌÖåÍ≥†Î¶¨"},
        color_discrete_sequence=colors
    )
    fig1.update_layout(
        height=max(400, len(df_categories) * 40),
        font=dict(family="Arial, sans-serif", size=11),
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        title_font_size=18,
        title_x=0.5,
        showlegend=False,
        margin=dict(l=200, r=50, t=80, b=60),
        yaxis=dict(tickfont=dict(size=10)),
        xaxis=dict(tickfont=dict(size=11))
    )

    # ÎèÑÎÑõ Ï∞®Ìä∏
    fig2 = px.pie(
        df_categories,
        values='total_papers',
        names='category_short',
        title="ü•ß Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÎπÑÏú®",
        hole=0.4,
        color_discrete_sequence=colors
    )
    fig2.update_traces(
        textposition='inside',
        textinfo='percent+label',
        hovertemplate='<b>%{label}</b><br>ÎÖºÎ¨∏ Ïàò: %{value}<br>ÎπÑÏú®: %{percent}<extra></extra>'
    )
    fig2.update_layout(
        font=dict(family="Arial, sans-serif", size=12),
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        title_font_size=18,
        title_x=0.5
    )

    # ÏÑ∏Î∂ÄÏ£ºÏ†ú ÏÉÅÏúÑ 20Í∞ú Ï∞®Ìä∏
    top_subtopics = df_subtopics.sort_values('count', ascending=True).tail(20)
    fig3 = px.bar(
        top_subtopics,
        x='count',
        y='subtopic',
        color='category_short',
        orientation='h',
        title="üîç ÏÉÅÏúÑ ÏÑ∏Î∂ÄÏ£ºÏ†ú (Top 20)",
        labels={"count": "ÎÖºÎ¨∏ Ïàò", "subtopic": "ÏÑ∏Î∂ÄÏ£ºÏ†ú"},
        color_discrete_sequence=colors
    )
    fig3.update_layout(
        height=800,
        font=dict(family="Arial, sans-serif", size=10),
        plot_bgcolor='rgba(0,0,0,0)',
        paper_bgcolor='rgba(0,0,0,0)',
        title_font_size=18,
        title_x=0.5,
        margin=dict(l=250, r=50, t=80, b=60),
        yaxis=dict(tickfont=dict(size=9)),
        legend=dict(title="Ïπ¥ÌÖåÍ≥†Î¶¨")
    )

    # HTMLÏóê Ï∞®Ìä∏ Ï∂îÍ∞Ä
    with tag("div", klass="dashboard-grid"):
        with tag("div", klass="chart-container"):
            doc.asis(fig1.to_html(full_html=False, include_plotlyjs=False, div_id="category-chart"))
        
        with tag("div", klass="chart-container"):
            doc.asis(fig2.to_html(full_html=False, include_plotlyjs=False, div_id="category-pie"))
        
        with tag("div", klass="chart-container full-width"):
            doc.asis(fig3.to_html(full_html=False, include_plotlyjs=False, div_id="subtopic-chart"))

# Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÏÉÅÏÑ∏ ÏÑπÏÖò
for _, cat_row in df_categories.sort_values('total_papers', ascending=False).iterrows():
    category = cat_row['category']
    category_subtopics = df_subtopics[df_subtopics['category'] == category].sort_values('count', ascending=False)
    
    with tag("div", klass="category-section"):
        with tag("div", klass="category-header"):
            with tag("div", klass="category-title"):
                text(f"üìö {category}")
            with tag("div", klass="category-stats"):
                with tag("div", klass="category-stat"):
                    text(f"{cat_row['total_papers']}Ìé∏")
                with tag("div", klass="category-stat"):
                    text(f"{cat_row['subtopics']}Í∞ú Ï£ºÏ†ú")
        
        with tag("div", klass="subtopics-grid"):
            for _, subtopic_row in category_subtopics.iterrows():
                subtopic = subtopic_row['subtopic']
                papers = [p for p in all_papers if p['category'] == category and p['subtopic'] == subtopic]
                
                with tag("div", klass="subtopic-card"):
                    with tag("div", klass="subtopic-title"):
                        with tag("span"):
                            text(subtopic)
                        with tag("span", klass="paper-count"):
                            text(f"{len(papers)}Ìé∏")
                    
                    with tag("div", klass="papers-list"):
                        for paper in papers:
                            with tag("div", klass="paper-item"):
                                with tag("div", klass="paper-title"):
                                    text(paper.get('title', 'No title'))
                                
                                with tag("div", klass="paper-details"):
                                    with tag("span", klass="paper-journal"):
                                        text(paper.get('journal', 'Unknown journal'))
                                    with tag("span"):
                                        text(f"by {paper.get('author', 'Unknown author')}")
                                    if paper.get('issue_date'):
                                        with tag("span", klass="paper-date"):
                                            text(paper['issue_date'])
                                
                                if paper.get('abstract_summary'):
                                    with tag("div", klass="paper-summary"):
                                        text(paper['abstract_summary'])
                                
                                if paper.get('link'):
                                    with tag("a", href=paper['link'], target="_blank", klass="paper-link"):
                                        text("üìÑ PubMedÏóêÏÑú Î≥¥Í∏∞")

# Ìë∏ÌÑ∞ Ï∂îÍ∞Ä
with tag("div", klass="footer"):
    with tag("p"):
        text("Generated with Python, Gemini AI & GitHub Pages")
    if metadata.get("date_range", {}).get("oldest_formatted"):
        with tag("p", style="font-size: 0.9em; margin-top: 5px;"):
            date_range = metadata["date_range"]
            text(f"ÎÖºÎ¨∏ Î∞úÌñâ Í∏∞Í∞Ñ: {date_range['oldest_formatted']} ~ {date_range['newest_formatted']}")

# JavaScript Ï∂îÍ∞Ä
with tag("script"):
    doc.asis("""
    document.querySelectorAll('.subtopic-card').forEach(card => {
        card.addEventListener('mouseenter', function() {
            this.style.borderLeftWidth = '8px';
        });
        card.addEventListener('mouseleave', function() {
            this.style.borderLeftWidth = '5px';
        });
    });
    
    // Î∂ÄÎìúÎü¨Ïö¥ Îì±Ïû• Ïï†ÎãàÎ©îÏù¥ÏÖò
    window.addEventListener('load', function() {
        document.querySelectorAll('.chart-container, .subtopic-card, .stat-card, .category-section').forEach((el, index) => {
            el.style.opacity = '0';
            el.style.transform = 'translateY(20px)';
            el.style.transition = 'all 0.6s ease';
            
            setTimeout(() => {
                el.style.opacity = '1';
                el.style.transform = 'translateY(0)';
            }, index * 50);
        });
    });
    
    // ÎÖºÎ¨∏ ÏïÑÏù¥ÌÖú Ìò∏Î≤Ñ Ìö®Í≥º
    document.querySelectorAll('.paper-item').forEach(item => {
        item.addEventListener('mouseenter', function() {
            this.style.transform = 'translateX(5px)';
        });
        item.addEventListener('mouseleave', function() {
            this.style.transform = 'translateX(0)';
        });
    });
    """)

# HTML Ï†ÄÏû•
output_html = "index.html"  # GitHub PagesÎ•º ÏúÑÌï¥ index.htmlÎ°ú Ï†ÄÏû•
print("üíæ HTML ÌååÏùº ÏÉùÏÑ± Ï§ë...")
with open(output_html, "w", encoding="utf-8") as f:
    f.write(doc.getvalue())

print(f"‚úÖ ÎßàÏ∑®Ìïô Î∂ÑÎ•ò ÎåÄÏãúÎ≥¥Îìú ÏÉùÏÑ± ÏôÑÎ£å ‚Üí {output_html}")

# ÏûêÎèô Î∞∞Ìè¨ Ïã§Ìñâ
if AUTO_DEPLOY:
    print("\nüöÄ GitHub Pages ÏûêÎèô Î∞∞Ìè¨Î•º ÏãúÏûëÌï©ÎãàÎã§...")
    
    # Git Î†àÌè¨ÏßÄÌÜ†Î¶¨ ÌôïÏù∏/ÏÑ§Ï†ï
    if setup_git_repo():
        # Î∞∞Ìè¨ Ïã§Ìñâ
        pages_url = deploy_to_github()
        if pages_url:
            print("üéâ Î∞∞Ìè¨Í∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!")
        else:
            print("‚ö†Ô∏è Î∞∞Ìè¨ Ï§ë Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Î°úÏª¨ÏóêÏÑú ÌôïÏù∏Ìï©ÎãàÎã§.")
            try:
                webbrowser.open("file://" + os.path.abspath(output_html))
            except Exception:
                print(f"üìÅ ÏàòÎèôÏúºÎ°ú ÌååÏùºÏùÑ Ïó¥Ïñ¥Ï£ºÏÑ∏Ïöî: {os.path.abspath(output_html)}")
    else:
        print("üìù Git ÏÑ§Ï†ïÏùÑ ÏôÑÎ£åÌïú ÌõÑ Îã§Ïãú Ïã§ÌñâÌï¥Ï£ºÏÑ∏Ïöî.")
        try:
            webbrowser.open("file://" + os.path.abspath(output_html))
        except Exception:
            print(f"üìÅ ÏàòÎèôÏúºÎ°ú ÌååÏùºÏùÑ Ïó¥Ïñ¥Ï£ºÏÑ∏Ïöî: {os.path.abspath(output_html)}")
else:
    # Î°úÏª¨ÏóêÏÑúÎßå Ïó¥Í∏∞
    try:
        webbrowser.open("file://" + os.path.abspath(output_html))
        print("üåê Î°úÏª¨ Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú ÎåÄÏãúÎ≥¥ÎìúÎ•º Ïó¥ÏóàÏäµÎãàÎã§.")
    except Exception:
        print(f"üìÅ ÏàòÎèôÏúºÎ°ú ÌååÏùºÏùÑ Ïó¥Ïñ¥Ï£ºÏÑ∏Ïöî: {os.path.abspath(output_html)}")
    print("üí° ÏûêÎèô Î∞∞Ìè¨Î•º ÏõêÌïòÏãúÎ©¥ Ïä§ÌÅ¨Î¶ΩÌä∏ ÏÉÅÎã®Ïùò AUTO_DEPLOY = TrueÎ°ú ÏÑ§Ï†ïÌïòÏÑ∏Ïöî.")

print("\nüèÅ ÎßàÏ∑®Ìïô Ïó∞Íµ¨ Î∂ÑÎ•ò ÎåÄÏãúÎ≥¥Îìú ÏÉùÏÑ±Ïù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§!")
print("üìä ÎåÄÏãúÎ≥¥Îìú Ï£ºÏöî Í∏∞Îä•:")
print("   - Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ ÎÖºÎ¨∏ Î∂ÑÌè¨ Ï∞®Ìä∏")
print("   - ÏÑ∏Î∂ÄÏ£ºÏ†úÎ≥Ñ ÏÉÅÏÑ∏ Ï†ïÎ≥¥")
print("   - Í∞Å ÎÖºÎ¨∏Ïùò ÏöîÏïΩ Î∞è PubMed ÎßÅÌÅ¨")
print("   - Î∞òÏùëÌòï ÎîîÏûêÏù∏ÏúºÎ°ú Î™®Î∞îÏùº ÏßÄÏõê")